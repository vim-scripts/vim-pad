*vim-pad*                     for vim 7.3               Last change: 21 jan 2012

vim-pad is a quick notetaking plugin for vim.

It offers a similar way of managing notes to the one made popular by tools like
Notational Velocity, where file management is removed from the notetaking
workflow, being replaced by searching and sorting facilities, and where the creation
and searching of notes is integrated.

**IMPORTANT**: `vim-pad` requires `+python` and `+conceal` support from vim.
Check if the flags are enabled in `:version`.

- Global Commands |vim-pad-global-commands|
- List Commands |vim-pad-list-commands|
- In-Note Commands |vim-pad-note-commands|
- Configuration |vim-pad-configuration|
	- Notes Format |vim-pad-notes-format|
	- Misc |vim-pad-misc-config|
- Functions |vim-pad-functions|
- Rationale |vim-pad-design-rationale|


GLOBAL COMMANDS                                      *vim-pad-global-commands*
---------------

- *:ListPads* (`<Control><Escape>`, <leader><Escape> for the terminal, global:
  <Plug>PadListPads) lists the notes. You can pass a string to this command if
  you want to filter the notes.

The list of notes should display a series of lines like:

2 mins ago      | vim-pad is cool.↲ if you let me just say it.

The part before | should show when the note was last modified. For notes less
than a day old, the timestamp is displayed in a natural format, and after that
the timestamp follows the %Y-%m-%d %H:%M:%S format.

The first line of the file is taken as a title, and highlighted accordingly.
If the note only spans one line, the text before a dot or a comma is taken as
the title instead. Line breaks are displayed as ↲.

`<leader>s` in normal mode (default, global: <Plug>PadSearchPads) also calls
ListPads, but asks for a query to filter the notes before presenting the list.
Giving an empty query is equivalent to calling `ListPads` without arguments.

By default, ListPads won't show notes from the archive. To list them, you must
pass a bang to the command:

     :ListPads!

- *:OpenPad* (`<Shift><Escape>`, <leader>n in the terminal, global:
  <Plug>PadOpenPad) creates a new note.

If a string is given as its argument, it will insert the text as the first
line in the file.


LIST COMMANDS                                         *vim-pad-list-commands*
-------------

When in the notes list, you can open a note pressing `<Enter>` and delete it
using `<Del>` (`dd` in the terminal ). `<Escape>` closes the buffer.

You can start a search among your notes pressing `<Shift-F>`in the list. This
will update the buffer in real time. If the query doesn't match any of the
existing files, pressing `Enter` will create a new note with the query inserted
in the first line.

You can move the selected note to a subfolder by pressing `<localleader>+f`.
vim.pad will prompt you for the folder name. To move a note to the root
directory (|g:pad_dir|), press `<localleader>-f`. Likewise, to move a note to
the archive, press `<localleader>+a`, and `<localleader>-a` to move it back.

You can sort the notes in the current view by title, tags or date by pressing
<Shift-S> and selecting the mode.

IN-NOTE COMMANDS                                         *vim-pad-note-commands*
----------------

From a note, you can press `<localleader><Del>` (`<localleader>dd` in the
terminal) to delete it. `<localleader>+m` will ask for a filetype and insert a
modeline in the file accordingly.

The folder and archive mappings listed above (`<localleader>+f`and such) also
work inside notes.

CONFIGURATION                                         *vim-pad-configuration*
-------------

NOTE FOR WINDOWS USERS: The plugin will not work correctly unless `encoding` is
set to `utf-8` in your vimrc. Minimal compatibility for latin1 has been
provided, though (the plugin will load, but render incorrectly).

IMPORTANT 1: set the *g:pad_dir* variable in your .vimrc, to indicate where the
notes will be saved. The default is:

    let g:pad_dir = "~/notes/"

If the path is invalid (is not writeable or doesn't exist), vim-pad will nag
you to set a valid one.

NOTE FOR WINDOWS USERS: The pathname escaping is different in Windows. You
might need to escape backward slashes, like so:

    let g:pad_dir = "C:\\Users\\Foo\\Documents\\Notes"

IMPORTANT 2: Please check the mappings before using the plugin. The default
mappings are quite ergonomic, but you might want to change them. If the
default mappings have conflicts, vim-pad will let you know.

You can configure the default mappings by setting *g:pad_use_default_mappings*
to a value between 0 and 2.  0 disables the default mappings (you'll have to
add your own mappings for `<Plug>ListPads`, `<Plug>OpenPad` and
`<Plug>SearchPads` to your vimrc). 1 enables mappings for normal mode. 2
enables mappings for both normal and insert mode. The default value for
g:pad_use_default_mappings is 1.

NOTES FORMAT                                           *vim-pad-notes-format*

The default format for new notes is `markdown`. To change this to another
format, `pandoc` for example, put

    let *g:pad_default_format* = "pandoc"

in your `.vimrc`. You can also set the individual format of a note by adding
the corresponding modeline. For example,

	<!-- vim: set ft=vo_base: -->

at the beggining or the end of a file will tell vim to open the file as a
VimOutliner file. The modeline won't be shown in the list view.

The position modelines are inserted in a file when using pad#AddModeline is
determined by the value of *g:pad_modeline_position* . The default is
`bottom`, which means that it will be inserted at the end of the file. A value
of `top` means that it will be inserted in the first line of the file.

You can also set the *g:pad_default_file_extension* variable. This will give
all newly saved notes the given file extension (can be useful when
interoperating with apps that don't recognize modelines).

MISC                                                   *vim-pad-misc-config*

The height of the split windows this plugin uses can be set with
*g:pad_window_height* (the default is 8).

Notes are opened by default in a split window the same height as the __Pad__
buffer. If you want to open the notes in the main window, set
*g:pad_open_in_split* to 0.

vim-pad's list is opened at the bottom by default. If you want to open it at
the right side of the window, you must change the value of
*g:pad_position["list"]* to "right" (the default is "bottom"). You can set the
window width with *g:pad_window_width* (default: 40). When vim-pad is opened
this way, the timestamp is hidden.  Likewise, you can tell vim-pad to open the
notes at the right side of the window by setting the value of
*g:pad_position["pads"]* to "right".

vim-pad can search using either `grep` or `ack` (grep is the default). You can
set this using the *g:pad_search_backend* variable. By default, the search
ignores case (adjust *g:pad_search_ignore_case* as desired).

NOTE FOR WINDOWS USERS: You will need a GNU grep compatible executable
in your $PATH in order to search. Cygwin's version has been tested succesfully.

When showing the list of notes, vim-pad reads by default 200 chars from the
files, in order to show a summary of the file. You can adjust how many chars
you want vim-pad to read by setting the *g:pad_read_nchars_from_files* variable.

FUNCTIONS                                              *vim-pad-functions*
---------

- *pad#OpenPad()*           creates a new note.
- *pad#ListPads()*          displays the list of notes.
- *pad#SearchPads(query)*   shows the search note prompt

- *pad#UpdatePad()*         updates the pad file (internal)
- *pad#DeleteThis()*        deletes the currently open note
- *pad#AddModeline()*       adds a modeline
- *pad#MoveToFolder()*      moves a note to a subfolder of |g:pad_dir|
- *pad#MoveToSaveDir*       moves a note to |g:pad_dir|
- *pad#Archive*             archives a note
- *pad#Unarchive*           moves an archived note back to |g:pad_dir|

- *pad#EditPad()*           edit the selected note
- *pad#DeletePad()*         delete the selected note
- *pad#MovePad()*           move the selected note to a subfolder of |g:pad_dir|
- *pad#MovePadToSaveDir()*  move the selected note to |g:pad_dir|
- *pad#ArchivePad()*        archive the selected note
- *pad#UnarchivePad()*      move the selected note back to |g:pad_dir|
- *pad#IncrementalSearch()* search incrementally
- *pad#Sort()*              sort the displayed entries

- *pad#GetPadTitle()*       retrieve the selected note title
- *pad#GetHumanDate()*      retrieve the selected note data
- *pad#GetPadId()*          retrieve the selected note id

RATIONALE                                               *vim-pad-design-rationale*
---------

vim-pad has as its goals:

- Abstract file management away from notetaking. You shouldn't have to think
  about where to put your notes and how to name them.
- Make input and retrieval of notes as fast as possible. Searching for a note
  should be easy.
- Make notetaking as effortless as possible, trying never to disrupt your
  workflow more than necessary.

vim-pad tries to reach them by setting up a certain (opinionated) workflow for
notetaking. Besides mapping itself so search, listing and creation of notes is
never more than a few keypresses away, it abstracts file management by keeping
your notes in a single place, renaming files when they changed (this way,
filenames should reflect the note content).

vim-pad doesn't specify a format for your notes. Instead, it uses a default,
which you can configure, and incentives the use of modelines. This means that
your notes can be free-form and adapt to your needs, and also, that you can use
vim-pad as a complement for other note taking plugins (it works great along
other plugins like [VimOutliner](https://github.com/vimoutliner/vimoutliner/)
and [quicktask](https://github.com/aaronbieber/quicktask).)
