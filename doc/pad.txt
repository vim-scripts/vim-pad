*vim-pad*                     for vim 7.3               Last change: 25 sept 2011

*vim-pad* is a quick notetaking plugin for vim.

- |vim-pad-design-rationale|
- |vim-pad-global-commands|
- |vim-pad-local-commands|
- |vim-pad-configuration|

*vim-pad-design-rationale*

There are many notetaking plugins for vim. Most of them depend on your notes
having a certain format for the convenience of highlighting stuff like headers,
lists and links. Also mostly, they don't provide a workflow for your notetaking:
you need to create manually a file to put your notes on and save it somewhere
with a name that hopefully makes sense (ever saved a note and then updated its
contents so the filename no longer applied?). Usually too, taking notes is
disruptive of whatever you are doing: imagine you're coding and have an idea you
think you might use afterwards. Ideally, you could just take the note right
there, without needing to travel to your notes, or cluttering your filesystem.

*vim-pad* tries to solve those issues, by focusing on a definite workflow.
First, it makes it so you can at any moment (in insert and normal mode):

- open your notes.
- search in your notes.
- create a new note.

Also, it keeps the filename issue away by:

- naming your files after the time you created them. This makes them unique and
  allows for easy sorting. The filenames are updated when changes are made in
  old files, so the date is always equal to the last time you modified your
  notes.
- considering the first line of your document as its title. This is in tune with
  the way most markup styles work (e.g., markdown)

vim-pad doesn't specify a format for your notes. Instead, it uses a default,
which you can configure, and allows the use of modelines. This means that your
notes can be free-form and adapt to your needs. Modelines aren't shown in the
list of notes.

*vim-pad-configuration*

IMPORTANT 1: Default keybidings are quite ergonomic in a QWERTY keyboard, but
they will fail in other layouts. Please check the keybindings before using the
plugin. To set custom mappings, set *g:pad_custom_mappings* to 1 in your .vimrc
before defining your new mappings.

IMPORTANT 2: set the *g:pad_dir* variable in your .vimrc, to indicate where the
notes will be saved. The default is:

    let g:pad_dir = "~/notes/"

The default format for new notes is `markdown`. To change this to another
format, `pandoc` for example, put

    let *g:pad_format* = "pandoc"

in your `.vimrc`. You can also set the individual format of a note by turning
the first line in the note into a modeline:

	<!-- vim: set ft=vo_base: -->

at the beggining of a file will tell vim to open the file as a VimOutliner file.
The modeline won't be shown in the list view.

The height of the split windows this plugin uses can be set with
`*g:pad_window_height*`.

There is a variant highlighting scheme you can enable by setting
`*g:pad_highlighting_variant*` to 1 in your vimrc.

vim-pad can search using either `grep` or `ack` (grep is the default). You can
set this using the *g:pad_search_backend* variable. By default, the search
ignores case (adjust *g:pad_search_ignore_case* as desired).

When showing the list of notes, vim-pad reads by default 200 chars from the
files, in order to show a summary of the file. You can adjust how many chars
you want vim-pad to read by setting the *g:pad_read_nchars_from_files* variable.

*vim-pad-global-commands*

- *:OpenPad* (`<Shift><Escape>`) creates a new note.

- *:ListPads* (`<Control><Escape>`) lists the notes. You can pass a string to this 
command if you want to filter the notes.

`<leader>s` also calls ListPads, but asks for a query to filter the notes before
presenting the list. Giving an empty query is equivalent to calling `ListPads`
without arguments.

*vim-pad-local-commands*

When in the buffer cretaed by `:ListPads`, you can open a note pressing
`<Enter>` and delete it using `<Del>`. `<Escape>` closes the buffer. Also, you
can search among your notes using <Shift-F>. This will update the buffer in
real time. If the query doesn't match any of the existing files, pressing
`Enter` will create a new note with the query inserted in the first line.

When in a note, `<localleader><Del>` will delete it. `<localleader>+m` will ask
for a filetype and insert a modeline in the file accordingly.
