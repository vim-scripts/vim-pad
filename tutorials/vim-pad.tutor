# vim-pad: a tutorial

vim-pad is a handy note-taking plugin. This document will lead you through its
features and give you some tips. It is also devised as a more hands-on refresher
than [vim-pad's help file](vim-pad), so you can use it as a quick reference.

To start using vim-pad, you need to point it to the place your notes will be
saved. For this tutorial, we'll use a temp dir.  Place your cursor over the
next command and press «>>» 
~~~ viml
    :let g:pad#dir = fnamemodify(tempname(), ":h")
~~~
IMPORTANT: [g:pad#dir](g:pad#dir) MUST be a full path, vim-pad won't work properly otherwise!

Table of contents: («zO» to open a section, «zc» to close it) 
## Creating a note

You should have an empty notes lists now; you need to take note of this! 

To create a new note you can either execute
~~~ viml
    :Pad new
~~~
or press <Shift-Escape>. Do so now.

You'll see a new empty file has opened (with the default settings, it should
open below this [window](window)). Write a note mentioning you didn't have any
notes before and :write the file. You can now close the window with the note.

EXERCISE: Now, create another note. This time, write something about the sky.

## Listing the notes

You'll want to retrieve your notes now. you can do it by either executing
~~~ viml
    :Pad ls
~~~
or pressing <Control-Escape>. Do it now. You'll see the list show how long ago
you created the notes, and will show you a bit of the notes contents. Press
<Enter> to open the note in the current line (you'll see this line is
highlighted). 

Before moving on, close any note you could have open. Also, if you want, create
a couple more notes.

## Searching

If you are looking for something in particular within your notes, you'll want to
use vim-pad search utilities. 

Earlier, you created a note about the sky. We'll search for it now.

Open the notes list and press <S-f>. You'll see the prompt has changed to

    >> 

You can now type a query. Since we are looking for the note aboout the sky,
type "sky" (let's hope you used the word!). You'll see the list changes when you
type, since it's filtering. Once you have finished searching, press <Enter> to
finish the query, and then open the note as you've done before. You'll see the
query is highlighted.

EXERCISE: Try searching for other terms.

You now know the basics of vim-pad! This should be enough to make good use of
vim-pad as an everyday tool. However, there is still plenty to learn. 

### Other ways to search

You can search non interactively, but without opening the notes list, with
[<leader>](<Leader>)s . Pressing <Enter> after finishing the query will show the
list of matching notes.

## More on creating notes 

There is yet another way to search for notes: If you press <leader>ss in any
window, an interactive search will start. This s pretty similar to <leader>s,
but it will also allow the user to create a new note if the query is not found.
If so, pressing <Enter> will open a new note with the query pre-appended. This
is a pretty convenient way of creating a new note very quick and keep adding to
it. If you don't need to open the note afterwards, you can use <Leader>s!
instead (even quicker!).

EXERCISE: Create a couple notes like this.

### Using different types of files for notes

Have you noticed that sitcky notes come both blank and pre-filled? Well, that is
because not all notes (like people) are born the same! You shouldn't have to
conform to any particular format. vim-pad does not impose any.

That said, it uses markdown by default, because it is a very good general
purpose format (also because vim comes with support for it by default). You can
change this default to your hearts desire by setting the
[g:pad#default_format](g:pad#default_format) variable. For example, you can make
your notes be LaTeX by default:
~~~ viml
    :let g:pad#default_format = "tex"
~~~
To change a particular note's format, you'll have to add a [modeline](modeline).
Doing so by hand is tiresome, so you can press <localleader>+m to add one.
You'll be prompted for a filetype. Select one and press <Enter>. Voilá! The
modeline is added, and the filetype is set.

EXERCISE: Create a new note, add a "html" modeline. Close, open again, check if
the filetype is correct.

### Tags

If you write labels starting with # or @ in your file, they will be treated like
tags when you list the notes.

EXERCISE: Add the #test tag to some of the notes you've created. Check the list
of notes.

### Sorting

Sometimes you'll want to sort the notes in the list. For example, you might want
to sort alphabetically all the notes you have titled "recipe:...". To do this,
press <S-s> while the list is open, select the sorting method and press <Enter>.

NOTE: Sorting won't undo a query you have previously entered, so you can search
for all notes mentioning "chicken" and then sort them alphabetically. 

## Deleting notes, using sub-folders and archiving

If you'be been toying with vim-pad during this tutorial, you'll have a mess of
notes. Let's see what we can do about it...

### Deleting notes

Nuke some! 

From the notes list, select a note you want to delete and then press
dd. You'll be prompted to confirm.

EXERCISE: Delete the worst of notes.

If you are editing a note and discover you don't want it anymore (what were you
thinking!), you can press <localleader><Del>.

EXERCISE: Open a previously saved note and delete it this way. 

### Moving into sub-folders

Perhaps you'll want to organize the notes in groups. One option is to use tags,
which we've seen before, but that requires writing the tags in the files, and
you might not want that. Another option is to place your notes into topic
folders. You can do it manually (and vim-pad will show you the folders when
listing the notes), but there are better ways from within vim. 

From the list, select a note and press «+f» . You'll be prompted for a
folder name to put the note in. If the folder doesn't exist, vim-pad will create
it. 

NOTE: Pressing the same combo within a note, with <localleader> prepended, does
the same.

EXERCISE: Create a note and put it in the "test" folder.

NOTE: you can have subfolders to your subfolders.

EXERCISE: Move the note in the test folder to the "test/again" folder.

If you want to move notes back to the root notes dir, you can use
«-f» (<localleader>-f within the note).

EXERCISE: Return the note you just created to the root dir.

### Archiving

If you are an avid note-taker, you'll soon have a very large list of notes. But
some notes you simply don't want to have around all the time. For example, you
could have monthly TODO lists, or notes for proyects you've finished already, etc.
You want to keep this stuff, but keep it "away" too. For this, vim-pad features
an archive system. Any note in the special "archive/" folder will be treated as
archived, and won't be shown normaly by :Pad ls. To list the archive, you have
to put a ! after the command, like this
~~~ viml
    :Pad! ls
~~~
If you try it now, it won't do anything special, because we haven't archived
anything yet. Let's do it!

To put things on the archive, you can use «+a» (in both the list and
the notes).

EXERCISE: Archive a couple of notes, and list the notes with :Pad! ls.

## Local notes

So far, you've seen how to manage a global list of notes. But sometimes when you
work in a project, you want to keep notes about it which are only relevant to
it, and might not want to see them in the global list. For this, vim-pad has the
ability to detect local notes, which are saved in a folder in the current dir.
By default, this folder will be called "notes", but that can be changed by
setting the [g:pad#local_dir](g:pad#local_dir) variable.

To create a local note, use
~~~ viml
    :Pad! new
~~~
(notice the bang !).

To create a local note about the file you are currently working on, use
~~~ viml
    :Pad this
~~~
EXERCISE: Create a local note about this tutorial. List the notes to see it
listed. Delete it.

## Conclusion

I hope this tutorial helps you to use vim-pad more efficiently, and gives you
some ideas about how to handle your notes. If you have suggestions or issues,
please open an issue at https://github.com/fmoralesc/vim-pad/issues or write me
at hel.sheep@gmail.com I try to reply as soon as possible.

### Some extras

For formatting your notes, you might want to check some of these plugins:

- vimoutliner https://github.com/vimoutliner/vimoutliner
- quicktask https://github.com/aaronbieber/quicktask
- vim-notes https://github.com/xolox/vim-notes
- vim-orgmode https://github.com/jceb/vim-orgmode
- vim-pandoc https://github.com/vim-pandoc/vim-pandoc

Some of these also have note management utilities, but I think you'll prefer
vim-pad ;)

 vim: set tw=80 foldlevel=1:

